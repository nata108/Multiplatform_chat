{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","MobilRightPane.tsx","MobilMain.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","sendPacket","staySignedIn","src","width","onClick","href","preventDefault","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListeners","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","MobilRightPane","referenceTo","contentType","onBack","id","senderId","onSend","MobilMain","undefined","App","loggedIn","isMobile","window","innerWidth","checkWidth","bind","removeEventListener","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ee3faadb.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket } from './chat';\r\nimport { EventProducer } from './EventProducer';\r\nimport { ProxyEventMap } from './ProxyEventMap';\r\n\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n  private ws: WebSocket;\r\n  inbox: InboxDto | null = null;\r\n\r\n  constructor()\r\n  {\r\n      super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"open\", () =>\r\n        {\r\n        });\r\n        this.ws.addEventListener(\"message\", e =>\r\n        {\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch(p.type)\r\n            {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\",cid,p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\",p.conversation.channelId);\r\n                    break;\r\n\r\n      }\r\n    }\r\n    );  \r\n  }\r\n  public sendPacket(packet: OutgoingPacket)\r\n  {\r\n    this.ws.send(JSON.stringify(packet));\r\n  }\r\n}\r\n\r\n\r\nexport var proxy = new Proxy();","export class EventProducer<M>\r\n{\r\n  private listeners: {type: keyof M, listener, obj?: Object}[] = [];\r\n\r\n  addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object)\r\n  {\r\n    this.listeners.push({type, listener, obj});\r\n  }\r\n  removeEventListener<K extends keyof M>(type:K, listener: M[K])\r\n  {\r\n    this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener),1);\r\n  }\r\n  protected dispatch<K extends keyof M>(type: K, ...args)\r\n  {\r\n    for (let listener of this.listeners.filter(x => x.type === type))\r\n      listener.listener.call(listener.obj, ...args);\r\n  }\r\n  removeAllEventListeners(obj: Object)\r\n  {\r\n    if(!obj)\r\n      throw new Error(\"Must specify object\");\r\n    this.listeners.filter(x => x.obj !== obj);\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport './TextInput.css'\r\n\r\nexport interface TextInputOptions\r\n{\r\n    value?: string;\r\n    onChange?:(value:string) => void;\r\n    type?: \"text\"|\"password\"|\"email\";\r\n    placeholder?: string;\r\n    onEnter?:()=>void;\r\n    autofocus?: boolean;\r\n}\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = {value: this.props.value, focus: false};\r\n    render()\r\n    {\r\n        let attrs = {} as any;\r\n        if ( this.props.autofocus )\r\n            attrs.autoFocus = true;\r\n        if ( this.props.onEnter )\r\n            attrs.onKeyDown = e =>\r\n            {\r\n            if ( e.keyCode === 13 )\r\n            this.props.onEnter!();\r\n            };\r\n        return(\r\n                <div className=\"text-input\">\r\n                <input type={ this.props.type ?? \"text\" } value={ this.state.value }\r\n                onChange={ e =>\r\n                {\r\n                this.setState( { value: e.target.value } );\r\n                this.props.onChange?.( e.target.value );\r\n                } }\r\n                onBlur={ () => this.setState( { focus: false } ) }\r\n                onFocus={ () => this.setState( { focus: true } ) }\r\n                {...attrs} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n                { this.props.placeholder }\r\n                </label>\r\n                </div> \r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {proxy} from './Proxy';\r\nimport {TextInput} from './TextInput';\r\n\r\nexport class Login extends Component\r\n{\r\n    state = {email:\"\", password:\"\", displayName:\"\", register: false};\r\n\r\n    onClick()\r\n    {\r\n        if ( this.state.register )\r\n            proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false } );\r\n        else\r\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false } );\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className = 'login'>\r\n                <img src = \"logo512.png\" width = \"256\" />\r\n                {this.state.register &&\r\n                <TextInput type=\"text\" placeholder=\"Display Name\" value={this.state.displayName}\r\n                onChange={e => this.setState({displayName: e})}/>\r\n                }\r\n                <TextInput type = \"email\" placeholder = \"Email (someone@example.com)\" value={this.state.email} onChange={e => {this.setState({email: e}); if(e === \"A0QOOJ\") this.setState({displayName: \"Natabara\"});}} />\r\n                <TextInput type = \"password\" placeholder = \"Password\" value={this.state.password} onChange={e => this.setState({password: e})} />\r\n            <button type = \"button\" onClick={()=> this.onClick()}>{this.state.register?\"Register\":\"Login\"}</button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                <a href=\"\" onClick={ e => { e.preventDefault(); this.setState( { register: !this.state.register } ); } }>\r\n                { this.state.register ? \"Login\" : \"Register\" }\r\n                </a>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport { TextInputOptions, TextInput } from \"./TextInput\";\r\n\r\nexport interface TextInputAndButtonsOptions extends TextInputOptions\r\n{\r\n    buttonContent?: string;\r\n    onClick?: (text:string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonsOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n        this.textInput.current?.setState( { value: \"\" } );   \r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"text-input-and-button\">\r\n            <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n            <button type=\"button\" onClick={() => this.onClick()}>\r\n            {this.props.buttonContent}\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport { proxy } from './Proxy';\r\n\r\nexport class ConversationCard extends Component<{\r\nconversation: ConversationDto, selected:boolean,\r\nonSelect: () => void}>\r\n{\r\n    render()\r\n    {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0?\r\n        this.props.conversation.lastMessages[this.props.conversation.lastMessages.length-1]:null;\r\n        return(\r\n            <div className = {\"conversation-card\" + (this.props.selected? \"selected\":\"\")}\r\n            onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">{lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener(\"message\",(cid,m)=>\r\n        {\r\n            if(cid === this.props.conversation.channelId)\r\n            this.forceUpdate();\r\n        },this);\r\n\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListeners(this);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { InboxDto, ConversationDto } from './chat';\r\nimport {TextInputAndButton} from \"./TextInputAndButton\";\r\nimport { proxy } from './Proxy';\r\nimport {ConversationCard} from \"./ConversationCard\";\r\n\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox:InboxDto, selectedConversation: ConversationDto|undefined,\r\n    onSelect: (c: ConversationDto) => void}>\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"left-pane\">\r\n            <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n            <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n            buttonContent=\"Inv\"\r\n            onClick={ text => this.sendContactRequest( text ) } />\r\n            <div className=\"conversations\">\r\n            { this.props.inbox.conversations.map( x =>\r\n            <ConversationCard\r\n            key={ x.channelId }\r\n            conversation={ x }\r\n            selected={ x === this.props.selectedConversation }\r\n            onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest(email:string)\r\n    {\r\n        proxy.sendPacket({type: \"contactRequest\", email, firstMessage:\"Hello\"});\r\n        return true;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n    proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n    proxy.removeAllEventListeners( this );\r\n    }\r\n}","import React, {PureComponent} from 'react';\r\nimport {MessageDto} from './chat';\r\n\r\nexport class MessageCard extends PureComponent<{message: MessageDto, own: boolean}>\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <div className = {\"message-card\"+(this.props.own?\" own\":\"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">{new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport {proxy} from \"./Proxy\";\r\nimport { TextInputAndButton } from './TextInputAndButton';\r\nimport {MessageCard} from \"./MessageCard\";\r\n\r\nexport class MobilRightPane extends Component <{conversation?: ConversationDto, onBack:() => void}>\r\n{\r\n    componentDidMount(){\r\n        proxy.addEventListener(\"message\", (cid, m) => \r\n        {\r\n            if(cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListeners(this);\r\n    }\r\n\r\n    onSend(text:string)\r\n    {\r\n        proxy.sendPacket({type:\"message\", \r\n            channelId:this.props.conversation!.channelId, \r\n            referenceTo:0, contentType:0, content:\"A: \"+text});\r\n        return true;\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                <>\r\n                    <div className=\"conversation-header row\">\r\n                        <button type=\"button\" className=\"only-narrow\"\r\n                            onClick={ () => this.props.onBack() }>Back</button>\r\n                        <p>{ this.props.conversation?.name }</p>\r\n                    </div>\r\n                    <div className = \"messages\">\r\n                        {this.props.conversation?.lastMessages.map(x=>\r\n                            <MessageCard key={x.id} message={x} own ={x.senderId === proxy.inbox?.user.id} />)}\r\n                    </div>\r\n                    <div className = \"send-message row\">\r\n                        <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                        buttonContent=\"Send\" onClick={x => this.onSend(x)}/>\r\n                    </div>\r\n                </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, {Component} from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport {proxy} from \"./Proxy\";\r\nimport {LeftPane} from \"./LeftPane\";\r\nimport {MobilRightPane} from \"./MobilRightPane\";\r\n\r\nexport class MobilMain extends Component\r\n{\r\n    state = {selectedConversation: undefined as (ConversationDto|undefined)};\r\n\r\n    render()\r\n    {\r\n        let className = \"main row\"+(this.state.selectedConversation? \" right\": \" left\");\r\n        return(\r\n            <div className={className}>\r\n            <LeftPane\r\n            inbox={ proxy.inbox! }\r\n            selectedConversation={ this.state.selectedConversation }\r\n            onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n            <MobilRightPane conversation={ this.state.selectedConversation }\r\n                onBack = {() => this.setState({selectedConversation: undefined})} />\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}","import React, {Component} from 'react';\nimport {Login} from \"./Login\"\nimport { MobilMain } from './MobilMain';\nimport {proxy} from \"./Proxy\";\n\nexport default class App extends Component\n{\n  state = {loggedIn:false,isMobile:false}\n  \n  checkWidth()\n  {\n    this.setState({isMobile: window.innerWidth < 650})\n  }\n  componentDidMount()\n  {\n    this.checkWidth();\n    proxy.addEventListener( \"login\", () => {this.setState({loggedIn:true}); this.forceUpdate();}, this );\n    window.addEventListener(\"resize\", this.checkWidth.bind(this));\n  }\n  componentWillUnmount()\n  {\n    proxy.removeAllEventListeners( this );\n    window.removeEventListener(\"resize\",this.checkWidth);\n  }\n  render()\n  {\n    return(\n      <div className=\"app\">\n        {this.state.loggedIn?<MobilMain  />:<Login />}\n      </div>\n    );\n    \n  }\n \n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}